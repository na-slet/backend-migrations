"""empty message

Revision ID: e6f9b2c2986e
Revises: 
Create Date: 2022-11-13 19:35:15.302229

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'e6f9b2c2986e'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', postgresql.UUID(), nullable=False),
    sa.Column('role', postgresql.ENUM('REGULAR', 'CREATOR', name='roles'), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('surname', sa.String(), nullable=True),
    sa.Column('gender', postgresql.ENUM('MALE', 'FEMALE', name='gender'), nullable=True),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('avatar_id', sa.String(), nullable=True),
    sa.Column('vk_link', sa.String(), nullable=True),
    sa.Column('tg_link', sa.String(), nullable=True),
    sa.Column('birth_date', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id', 'email', 'username', name=op.f('pk__users')),
    sa.UniqueConstraint('id', name=op.f('uq__users__id'))
    )
    op.create_table('channels',
    sa.Column('id', postgresql.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('subscribed', sa.INTEGER(), nullable=True),
    sa.Column('creator_id', postgresql.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['creator_id'], ['users.id'], name=op.f('fk__channels__creator_id__users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk__channels')),
    sa.UniqueConstraint('id', name=op.f('uq__channels__id'))
    )
    op.create_table('events',
    sa.Column('id', postgresql.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('city', sa.String(), nullable=True),
    sa.Column('start_date', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('end_date', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('total_places', sa.INTEGER(), nullable=False),
    sa.Column('available_places', sa.INTEGER(), nullable=False),
    sa.Column('rating', sa.INTEGER(), nullable=True),
    sa.Column('link', sa.String(), nullable=True),
    sa.Column('address', sa.String(), nullable=False),
    sa.Column('logo_id', sa.String(), nullable=True),
    sa.Column('creator_id', postgresql.UUID(), nullable=False),
    sa.Column('channel_id', postgresql.UUID(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['channel_id'], ['channels.id'], name=op.f('fk__events__channel_id__channels'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['creator_id'], ['users.id'], name=op.f('fk__events__creator_id__users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk__events')),
    sa.UniqueConstraint('id', name=op.f('uq__events__id'))
    )
    op.create_table('booked',
    sa.Column('id', postgresql.UUID(), nullable=False),
    sa.Column('user_id', postgresql.UUID(), nullable=False),
    sa.Column('event_id', postgresql.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], name=op.f('fk__booked__event_id__events'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk__booked__user_id__users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk__booked')),
    sa.UniqueConstraint('id', name=op.f('uq__booked__id')),
    sa.UniqueConstraint('user_id', 'event_id', name=op.f('uq__booked__user_id_event_id'))
    )
    op.create_table('favourites',
    sa.Column('id', postgresql.UUID(), nullable=False),
    sa.Column('user_id', postgresql.UUID(), nullable=False),
    sa.Column('event_id', postgresql.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], name=op.f('fk__favourites__event_id__events'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk__favourites__user_id__users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk__favourites')),
    sa.UniqueConstraint('id', name=op.f('uq__favourites__id')),
    sa.UniqueConstraint('user_id', 'event_id', name=op.f('uq__favourites__user_id_event_id'))
    )
    op.create_table('likes',
    sa.Column('id', postgresql.UUID(), nullable=False),
    sa.Column('user_id', postgresql.UUID(), nullable=False),
    sa.Column('event_id', postgresql.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], name=op.f('fk__likes__event_id__events'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk__likes__user_id__users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk__likes')),
    sa.UniqueConstraint('id', name=op.f('uq__likes__id')),
    sa.UniqueConstraint('user_id', 'event_id', name=op.f('uq__likes__user_id_event_id'))
    )
    op.create_table('subscribed',
    sa.Column('id', postgresql.UUID(), nullable=False),
    sa.Column('user_id', postgresql.UUID(), nullable=False),
    sa.Column('event_id', postgresql.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], name=op.f('fk__subscribed__event_id__events'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk__subscribed__user_id__users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk__subscribed')),
    sa.UniqueConstraint('id', name=op.f('uq__subscribed__id')),
    sa.UniqueConstraint('user_id', 'event_id', name=op.f('uq__subscribed__user_id_event_id'))
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('subscribed')
    op.drop_table('likes')
    op.drop_table('favourites')
    op.drop_table('booked')
    op.drop_table('events')
    op.drop_table('channels')
    op.drop_table('users')
    # ### end Alembic commands ###
